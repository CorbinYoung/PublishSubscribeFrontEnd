{"version":3,"sources":["components/TopicList.jsx","components/Publisher.jsx","components/Subscriber.jsx","App.js","serviceWorker.js","index.js"],"names":["TopicList","renderAllTopics","props","topicsLoaded","topicList","length","className","Fragment","map","topic","key","style","color","this","textAlign","onClick","onUpdate","Component","Publisher","state","publisherID","topicInputValue","topicMessage","selectedTopic","activeTopics","handleTopicCreation","handlePostRequest","handleTopicDeletion","handlePublishMessage","topicToPublish","setState","alert","refreshActiveTopics","fetch","apiURL","then","resp","json","data","success","message","catch","error","endpoint","method","updateTopicList","getSubscriberID","destroyAllOwnedTopics","handleChange","event","target","name","value","setTimeout","type","aria-label","onDelete","id","aria-hidden","onChange","rows","float","Subscriber","serverSocket","subscriberID","messageArea","subscribedArea","connectToSocketServer","socket","WebSocket","socketURL","onopen","console","log","onmessage","push","date","toLocaleTimeString","forceUpdate","messageAreaElement","document","getElementById","scrollTop","scrollHeight","onclose","handleSubscribe","handleUnsubscribe","Date","close","hidden","readOnly","join","App","isTopicsLoaded","subscriberCount","publisherCount","subscriberList","publisherList","handleRetrieveActiveTopics","handleSubscriberAdd","handlePublisherAdd","handlePublisherDelete","remainingPublishers","filter","c","handleSubscriberDelete","remainingSubscribers","publisher","subscriber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b79b97a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TopicList extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ul className=\"list-group\">{this.renderAllTopics()}</ul>\r\n\r\n        <div className=\"pt-3\" style={{ textAlign: \"center\" }}>\r\n          <button className=\"btn btn-success\" onClick={this.props.onUpdate}>\r\n            Refresh\r\n          </button>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  renderAllTopics = () => {\r\n    if (!this.props.topicsLoaded) {\r\n      return <p style={{ color: \"#FF0000\" }}>Topic loading error</p>;\r\n    }\r\n\r\n    if (this.props.topicList.length === 0) {\r\n      return <li className=\"list-group-item\">No topics found</li>;\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.topicList.map((topic) => (\r\n          <li className=\"list-group-item\" key={topic}>\r\n            {topic}\r\n          </li>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n}\r\n\r\nexport default TopicList;","import React, { Component } from \"react\";\r\n\r\nclass Publisher extends Component {\r\n  state = {\r\n    publisherID: -1,\r\n    topicInputValue: \"\",\r\n    topicMessage: \"\",\r\n    selectedTopic: \"\",\r\n    activeTopics: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getSubscriberID();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.destroyAllOwnedTopics();\r\n    setTimeout(() => this.props.updateTopicList(), 500);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card container pt-3 pb-3\">\r\n        <div className=\"modal-header mb-3\">\r\n          <h3 className=\"text-center\">Publisher</h3>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            aria-label=\"Close\"\r\n            onClick={() => this.props.onDelete(this.props.id)}\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"form-inline\">\r\n            <label className=\"pr-1\">Topic Name </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control mr-1\"\r\n              name=\"topicInputValue\"\r\n              value={this.state.topicInputValue}\r\n              onChange={this.handleChange}\r\n            />\r\n            <button\r\n              className=\"btn btn-success mr-1\"\r\n              onClick={this.handleTopicCreation}\r\n            >\r\n              Create\r\n            </button>\r\n            <button\r\n              className=\"btn btn-danger mr-1\"\r\n              onClick={this.handleTopicDeletion}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n\r\n          <br />\r\n\r\n          <div className=\"form-group\">\r\n            <label>Message Content</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              name=\"topicMessage\"\r\n              value={this.state.topicMessage}\r\n              onChange={this.handleChange}\r\n              rows=\"3\"\r\n            ></textarea>\r\n            <form className=\"form-inline row mt-1\">\r\n              <label className=\"col-auto\">Topic</label>\r\n              <select\r\n                name=\"selectedTopic\"\r\n                value={this.state.selectedTopic}\r\n                onChange={this.handleChange}\r\n                className=\"custom-select col-10\"\r\n              >\r\n                {this.state.activeTopics.map((topic) => (\r\n                  <option key={topic}>{topic}</option>\r\n                ))}\r\n              </select>\r\n              <button\r\n                className=\"btn btn-success ml-1 col-1\"\r\n                style={{ float: \"right\" }}\r\n                onClick={this.handlePublishMessage}\r\n                type=\"button\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleTopicCreation = () => {\r\n    this.handlePostRequest(\r\n      \"createTopic?id=\" +\r\n        this.state.publisherID +\r\n        \"&topicName=\" +\r\n        this.state.topicInputValue\r\n    );\r\n  };\r\n\r\n  handleTopicDeletion = () => {\r\n    this.handlePostRequest(\r\n      \"deleteTopic?id=\" +\r\n        this.state.publisherID +\r\n        \"&topicName=\" +\r\n        this.state.topicInputValue\r\n    );\r\n  };\r\n\r\n  handlePublishMessage = () => {\r\n    if (this.state.activeTopics.length > 0) {\r\n      let topicToPublish = this.state.activeTopics[0];\r\n\r\n      if (this.state.selectedTopic.length > 0) {\r\n        topicToPublish = this.state.selectedTopic;\r\n      }\r\n\r\n      this.handlePostRequest(\r\n        \"publishMessage?id=\" +\r\n          this.state.publisherID +\r\n          \"&topicName=\" +\r\n          topicToPublish +\r\n          \"&messageContent=\" +\r\n          this.state.topicMessage\r\n      );\r\n\r\n      this.setState({ topicMessage: [] });\r\n    } else {\r\n      alert(\"There are no active topics at this time\");\r\n    }\r\n  };\r\n\r\n  refreshActiveTopics = () => {\r\n    fetch(\r\n      this.props.apiURL +\r\n        \"getPublisherActiveTopics?id=\" +\r\n        this.state.publisherID\r\n    )\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        if (data.success === true) {\r\n          this.setState({\r\n            activeTopics: data.message,\r\n          });\r\n        } else {\r\n          alert(\"Error refreshing active topic list\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Error refreshing active topic list\");\r\n      });\r\n  };\r\n\r\n  handlePostRequest = (endpoint) => {\r\n    fetch(\r\n      this.props.apiURL + endpoint, // Bypass CORS\r\n      {\r\n        method: \"POST\",\r\n      }\r\n    )\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        let message = data.success ? \"Success: \" : \"Failure: \";\r\n        message += data.message;\r\n        alert(message);\r\n        this.props.updateTopicList();\r\n        this.refreshActiveTopics();\r\n      })\r\n      .catch((error) => {\r\n        alert(\"An error has occured.\");\r\n      });\r\n  };\r\n\r\n  getSubscriberID = () => {\r\n    fetch(this.props.apiURL + \"initializePublisher\")\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        if (data.success === true) {\r\n          this.setState({\r\n            publisherID: data.message,\r\n          });\r\n        } else {\r\n          alert(\"Could not initialize subscriber ID from server\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Could not initialize subscriber ID from server\");\r\n      });\r\n  };\r\n\r\n  destroyAllOwnedTopics = () => {\r\n    fetch(\r\n      this.props.apiURL +\r\n        \"removeAllSubscriberActiveTopics?id=\" +\r\n        this.state.publisherID, // Bypass CORS\r\n      {\r\n        method: \"POST\",\r\n      }\r\n    );\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n}\r\n\r\nexport default Publisher;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Subscriber extends Component {\r\n  state = {\r\n    serverSocket: null,\r\n    selectedTopic: \"\",\r\n    subscriberID: -1,\r\n    messageArea: [],\r\n    subscribedArea: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.connectToSocketServer();\r\n    this.date = new Date();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.state.serverSocket.close();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card container pt-3 pb-3\">\r\n        <div className=\"modal-header mb-3\">\r\n          <h3 className=\"text-center\">Subscriber</h3>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            aria-label=\"Close\"\r\n            onClick={() => this.props.onDelete(this.props.id)}\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"input-group\">\r\n            <select\r\n              name=\"selectedTopic\"\r\n              value={this.state.selectedTopic}\r\n              onChange={this.handleChange}\r\n              onClick={this.props.updateTopicList}\r\n              className=\"custom-select col-10 mr-1\"\r\n            >\r\n              <option value hidden>\r\n                Choose your topic\r\n              </option>\r\n              {this.props.topicList.map((topic) => (\r\n                <option key={topic}>{topic}</option>\r\n              ))}\r\n            </select>\r\n            <button\r\n              className=\"btn btn-success mr-1\"\r\n              onClick={this.handleSubscribe}\r\n            >\r\n              Subscribe\r\n            </button>\r\n            <button\r\n              className=\"btn btn-danger mr-1\"\r\n              onClick={this.handleUnsubscribe}\r\n            >\r\n              Unsubscribe\r\n            </button>\r\n          </div>\r\n\r\n          <br />\r\n\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group col-10\">\r\n              <label>Messages</label>\r\n              <textarea\r\n                className=\"form-control\"\r\n                readOnly={true}\r\n                rows=\"10\"\r\n                value={this.state.messageArea.join(\"\\n\")}\r\n                id=\"messageArea\"\r\n              ></textarea>\r\n            </div>\r\n            <div className=\"form-group col-2\">\r\n              <label>Subscribed</label>\r\n              <textarea\r\n                className=\"form-control\"\r\n                readOnly={true}\r\n                rows=\"10\"\r\n                id=\"subscribedArea\"\r\n                value={this.state.subscribedArea.join(\"\\n\")}\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  connectToSocketServer = () => {\r\n    var socket = new WebSocket(this.props.socketURL);\r\n\r\n    socket.onopen = () => {\r\n      console.log(\"Client socket connected\");\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n      if (this.state.subscriberID === -1) {\r\n        this.setState({ subscriberID: event.data }); // could be string\r\n        console.log(\"Client socket connected with ID: \" + event.data);\r\n      } else {\r\n        this.state.messageArea.push(\r\n          this.date.toLocaleTimeString() + \" \" + event.data\r\n        );\r\n        this.forceUpdate();\r\n        var messageAreaElement = document.getElementById(\"messageArea\");\r\n        messageAreaElement.scrollTop = messageAreaElement.scrollHeight;\r\n      }\r\n    };\r\n\r\n    socket.onclose = () => {\r\n      console.log(\"Client socket disconnected.\");\r\n    };\r\n\r\n    this.setState({\r\n      serverSocket: socket,\r\n    });\r\n  };\r\n\r\n  handleSubscribe = () => {\r\n    if (this.state.selectedTopic.length > 0) {\r\n      this.handlePostRequest(\r\n        \"subscribeToTopic?id=\" +\r\n          this.state.subscriberID +\r\n          \"&topicName=\" +\r\n          this.state.selectedTopic\r\n      );\r\n    } else {\r\n      alert(\"Please select a topic\");\r\n    }\r\n  };\r\n\r\n  handleUnsubscribe = () => {\r\n    if (this.state.selectedTopic.length > 0) {\r\n      this.handlePostRequest(\r\n        \"unsubscribeToTopic?id=\" +\r\n          this.state.subscriberID +\r\n          \"&topicName=\" +\r\n          this.state.selectedTopic\r\n      );\r\n    } else {\r\n      alert(\"Please select a topic\");\r\n    }\r\n  };\r\n\r\n  refreshActiveTopics = () => {\r\n    fetch(\r\n      this.props.apiURL +\r\n        \"getSubscriberActiveTopics?id=\" +\r\n        this.state.subscriberID\r\n    )\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        if (data.success === true) {\r\n          this.setState({\r\n            subscribedArea: data.message,\r\n          });\r\n        } else {\r\n          alert(\"Error refreshing topics\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Error refreshing topics\");\r\n      });\r\n  };\r\n\r\n  handlePostRequest = (endpoint) => {\r\n    fetch(\r\n      this.props.apiURL + endpoint, // Bypass CORS\r\n      {\r\n        method: \"POST\",\r\n      }\r\n    )\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        let message = data.success ? \"Success: \" : \"Failure: \";\r\n        message += data.message;\r\n        alert(message);\r\n        this.refreshActiveTopics();\r\n      })\r\n      .catch((error) => {\r\n        alert(\"An error has occured.\");\r\n      });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n}\r\n\r\nexport default Subscriber;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport TopicList from \"./components/TopicList\";\r\nimport Publisher from \"./components/Publisher\";\r\nimport Subscriber from \"./components/Subscriber\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    apiURL: \"http://52.188.147.152:8888/\",\r\n    socketURL: \"ws://52.188.147.152:8080/\",\r\n    isTopicsLoaded: false,\r\n    topicList: [],\r\n    subscriberCount: 1,\r\n    publisherCount: 2,\r\n    subscriberList: [{ id: 0 }, { id: 1 }],\r\n    publisherList: [{ id: 0 }, { id: 1 }, { id: 2 }],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.handleRetrieveActiveTopics();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"text-center\">Topic List</h1>\r\n        <div className=\"pt-2 container\">\r\n          <TopicList\r\n            topicList={this.state.topicList}\r\n            topicsLoaded={this.state.isTopicsLoaded}\r\n            onUpdate={this.handleRetrieveActiveTopics}\r\n          />\r\n        </div>\r\n\r\n        <br />\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-6\">\r\n            <button\r\n              className=\"btn btn-primary btn-block mb-2 container\"\r\n              onClick={this.handlePublisherAdd}\r\n            >\r\n              Add Publisher\r\n            </button>\r\n            {this.state.publisherList.map((publisher) => (\r\n              <React.Fragment key={publisher.id}>\r\n                <Publisher\r\n                  apiURL={this.state.apiURL}\r\n                  updateTopicList={this.handleRetrieveActiveTopics}\r\n                  key={publisher.id}\r\n                  id={publisher.id}\r\n                  onDelete={this.handlePublisherDelete}\r\n                />\r\n                <br />\r\n              </React.Fragment>\r\n            ))}\r\n          </div>\r\n          \r\n          <div className=\"col-6\">\r\n            <button\r\n              className=\"btn btn-primary btn-block mb-2 container\"\r\n              onClick={this.handleSubscriberAdd}\r\n            >\r\n              Add Subscriber\r\n            </button>\r\n            {this.state.subscriberList.map((subscriber) => (\r\n              <React.Fragment key={subscriber.id}>\r\n                <Subscriber\r\n                  className=\"col-sm-6\"\r\n                  apiURL={this.state.apiURL}\r\n                  socketURL={this.state.socketURL}\r\n                  topicList={this.state.topicList}\r\n                  updateTopicList={this.handleRetrieveActiveTopics}\r\n                  key={subscriber.id}\r\n                  id={subscriber.id}\r\n                  onDelete={this.handleSubscriberDelete}\r\n                />\r\n                <br />\r\n              </React.Fragment>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  handleRetrieveActiveTopics = () => {\r\n    fetch(this.state.apiURL + \"getAllTopicNames\")\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        if (data.success === true) {\r\n          this.setState({\r\n            isTopicsLoaded: true,\r\n            topicList: data.message,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            isTopicsLoaded: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          isTopicsLoaded: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  handleSubscriberAdd = () => {\r\n    this.state.subscriberList.push({ id: this.state.subscriberCount + 1 });\r\n    this.setState({ subscriberCount: this.state.subscriberCount + 1 });\r\n  };\r\n\r\n  handlePublisherAdd = () => {\r\n    this.state.publisherList.push({ id: this.state.publisherCount + 1 });\r\n    this.setState({ publisherCount: this.state.publisherCount + 1 });\r\n  };\r\n\r\n  handlePublisherDelete = (publisherID) => {\r\n    const remainingPublishers = this.state.publisherList.filter(\r\n      (c) => c.id !== publisherID\r\n    );\r\n    this.setState({ publisherList: remainingPublishers });\r\n  };\r\n\r\n  handleSubscriberDelete = (subscriberID) => {\r\n    const remainingSubscribers = this.state.subscriberList.filter(\r\n      (c) => c.id !== subscriberID\r\n    );\r\n    this.setState({ subscriberList: remainingSubscribers });\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css' // imports bootstrap\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}