{"version":3,"sources":["components/TopicList.jsx","components/Publisher.jsx","components/Subscriber.jsx","App.js","serviceWorker.js","index.js"],"names":["TopicList","renderAllTopics","props","topicsLoaded","topicList","length","className","Fragment","map","topic","key","style","color","this","textAlign","onClick","onUpdate","Component","Publisher","state","topicInputValue","topicMessage","selectedTopic","handleTopicCreation","handlePostRequest","handleTopicDeletion","handlePublishMessage","setState","alert","endpoint","fetch","apiURL","method","then","resp","json","data","message","success","updateTopicList","catch","error","handleChange","event","target","name","value","type","aria-label","onDelete","id","aria-hidden","onChange","rows","float","Subscriber","serverSocket","subscriberID","messageArea","subscribedArea","connectToSocketServer","socket","WebSocket","socketURL","onopen","console","log","onmessage","push","date","toLocaleTimeString","forceUpdate","messageAreaElement","document","getElementById","scrollTop","scrollHeight","onclose","handleSubscribe","handleUnsubscribe","refreshActiveTopics","Date","close","hidden","readOnly","join","App","isTopicsLoaded","subscriberCount","publisherCount","subscriberList","publisherList","handleRetrieveActiveTopics","handleSubscriberAdd","handlePublisherAdd","handlePublisherDelete","publisherID","remainingPublishers","filter","c","handleSubscriberDelete","remainingSubscribers","publisher","subscriber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da0bcdb3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TopicList extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ul className=\"list-group\">{this.renderAllTopics()}</ul>\r\n\r\n        <div className=\"pt-3\" style={{ textAlign: \"center\" }}>\r\n          <button className=\"btn btn-success\" onClick={this.props.onUpdate}>\r\n            Refresh\r\n          </button>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  renderAllTopics = () => {\r\n    if (!this.props.topicsLoaded) {\r\n      return <p style={{ color: \"#FF0000\" }}>Topic loading error</p>;\r\n    }\r\n\r\n    if (this.props.topicList.length === 0) {\r\n      return <li className=\"list-group-item\">No topics found</li>;\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.topicList.map((topic) => (\r\n          <li className=\"list-group-item\" key={topic}>\r\n            {topic}\r\n          </li>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n}\r\n\r\nexport default TopicList;","import React, { Component } from \"react\";\r\n\r\nclass Publisher extends Component {\r\n  state = {\r\n    topicInputValue: \"\",\r\n    topicMessage: \"\",\r\n    selectedTopic: \"\",\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card container pt-3 pb-3\">\r\n        <div className=\"modal-header mb-3\">\r\n          <h3 className=\"text-center\">Publisher</h3>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            aria-label=\"Close\"\r\n            onClick={() => this.props.onDelete(this.props.id)}\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"form-inline\">\r\n            <label className=\"pr-1\">Topic Name </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control mr-1\"\r\n              name=\"topicInputValue\"\r\n              value={this.state.topicInputValue}\r\n              onChange={this.handleChange}\r\n            />\r\n            <button\r\n              className=\"btn btn-success mr-1\"\r\n              onClick={this.handleTopicCreation}\r\n            >\r\n              Create\r\n            </button>\r\n            <button\r\n              className=\"btn btn-danger mr-1\"\r\n              onClick={this.handleTopicDeletion}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n\r\n          <br />\r\n\r\n          <div className=\"form-group\">\r\n            <label>Message Content</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              name=\"topicMessage\"\r\n              value={this.state.topicMessage}\r\n              onChange={this.handleChange}\r\n              rows=\"3\"\r\n            ></textarea>\r\n            <form className=\"form-inline row mt-1\">\r\n              <label className=\"col-auto\">Topic</label>\r\n              <select\r\n                name=\"selectedTopic\"\r\n                value={this.state.selectedTopic}\r\n                onChange={this.handleChange}\r\n                className=\"custom-select col-10\"\r\n              >\r\n                {this.props.topicList.map((topic) => (\r\n                  <option key={topic}>{topic}</option>\r\n                ))}\r\n              </select>\r\n              <button\r\n                className=\"btn btn-success ml-1 col-1\"\r\n                style={{ float: \"right\" }}\r\n                onClick={this.handlePublishMessage}\r\n                type=\"button\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleTopicCreation = () => {\r\n    this.handlePostRequest(\r\n      \"createTopic?topicName=\" + this.state.topicInputValue\r\n    );\r\n  };\r\n\r\n  handleTopicDeletion = () => {\r\n    this.handlePostRequest(\r\n      \"deleteTopic?topicName=\" + this.state.topicInputValue\r\n    );\r\n  };\r\n\r\n  handlePublishMessage = () => {\r\n    if (this.props.topicList.length > 0) {\r\n      if (this.state.selectedTopic.length === 0) {\r\n        this.state.selectedTopic = this.props.topicList[0];\r\n      }\r\n\r\n      this.handlePostRequest(\r\n        \"publishMessage?topicName=\" +\r\n          this.state.selectedTopic +\r\n          \"&messageContent=\" +\r\n          this.state.topicMessage\r\n      );\r\n\r\n      this.setState({ topicMessage: [] });\r\n    } else {\r\n      alert(\"There are no active topics at this time\");\r\n    }\r\n  };\r\n\r\n  handlePostRequest = (endpoint) => {\r\n    fetch(\r\n      this.props.apiURL + endpoint, // Bypass CORS\r\n      {\r\n        method: \"POST\",\r\n      }\r\n    )\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        let message = data.success ? \"Success: \" : \"Failure: \";\r\n        message += data.message;\r\n        alert(message);\r\n        this.props.updateTopicList();\r\n      })\r\n      .catch((error) => {\r\n        alert(\"An error has occured.\");\r\n      });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n}\r\n\r\nexport default Publisher;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Subscriber extends Component {\r\n  state = {\r\n    serverSocket: null,\r\n    selectedTopic: \"\",\r\n    subscriberID: -1,\r\n    messageArea: [],\r\n    subscribedArea: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.connectToSocketServer();\r\n    this.date = new Date();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.state.serverSocket.close();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card container pt-3 pb-3\">\r\n        <div className=\"modal-header mb-3\">\r\n          <h3 className=\"text-center\">Subscriber</h3>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            aria-label=\"Close\"\r\n            onClick={() => this.props.onDelete(this.props.id)}\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"input-group\">\r\n            <select\r\n              name=\"selectedTopic\"\r\n              value={this.state.selectedTopic}\r\n              onChange={this.handleChange}\r\n              onClick={this.props.updateTopicList}\r\n              className=\"custom-select col-10 mr-1\"\r\n            >\r\n              <option value hidden>\r\n                Choose your topic\r\n              </option>\r\n              {this.props.topicList.map((topic) => (\r\n                <option key={topic}>{topic}</option>\r\n              ))}\r\n            </select>\r\n            <button\r\n              className=\"btn btn-success mr-1\"\r\n              onClick={this.handleSubscribe}\r\n            >\r\n              Subscribe\r\n            </button>\r\n            <button\r\n              className=\"btn btn-danger mr-1\"\r\n              onClick={this.handleUnsubscribe}\r\n            >\r\n              Unsubscribe\r\n            </button>\r\n          </div>\r\n\r\n          <br />\r\n\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group col-10\">\r\n              <label>Messages</label>\r\n              <textarea\r\n                className=\"form-control\"\r\n                readOnly={true}\r\n                rows=\"10\"\r\n                value={this.state.messageArea.join(\"\\n\")}\r\n                id=\"messageArea\"\r\n              ></textarea>\r\n            </div>\r\n            <div className=\"form-group col-2\">\r\n              <label>Subscribed</label>\r\n              <textarea\r\n                className=\"form-control\"\r\n                readOnly={true}\r\n                rows=\"10\"\r\n                id=\"subscribedArea\"\r\n                value={this.state.subscribedArea.join(\"\\n\")}\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  connectToSocketServer = () => {\r\n    var socket = new WebSocket(this.props.socketURL);\r\n\r\n    socket.onopen = () => {\r\n      console.log(\"Client socket connected\");\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n      if (this.state.subscriberID === -1) {\r\n        this.setState({ subscriberID: event.data }); // could be string\r\n        console.log(\"Client socket connected with ID: \" + event.data);\r\n      } else {\r\n        this.state.messageArea.push(\r\n          this.date.toLocaleTimeString() + \" \" + event.data\r\n        );\r\n        this.forceUpdate();\r\n        var messageAreaElement = document.getElementById(\"messageArea\");\r\n        messageAreaElement.scrollTop = messageAreaElement.scrollHeight;\r\n      }\r\n    };\r\n\r\n    socket.onclose = () => {\r\n      console.log(\"Client socket disconnected.\");\r\n    };\r\n\r\n    this.setState({\r\n      serverSocket: socket,\r\n    });\r\n  };\r\n\r\n  handleSubscribe = () => {\r\n    if (this.state.selectedTopic.length > 0) {\r\n      this.handlePostRequest(\r\n        \"subscribeToTopic?id=\" +\r\n          this.state.subscriberID +\r\n          \"&topicName=\" +\r\n          this.state.selectedTopic\r\n      );\r\n    } else {\r\n      alert(\"Please select a topic\");\r\n    }\r\n  };\r\n\r\n  handleUnsubscribe = () => {\r\n    if (this.state.selectedTopic.length > 0) {\r\n      this.handlePostRequest(\r\n        \"unsubscribeToTopic?id=\" +\r\n          this.state.subscriberID +\r\n          \"&topicName=\" +\r\n          this.state.selectedTopic\r\n      );\r\n    } else {\r\n      alert(\"Please select a topic\");\r\n    }\r\n  };\r\n\r\n  refreshActiveTopics = () => {\r\n    fetch(\r\n      this.props.apiURL +\r\n        \"getSubscriberActiveTopics?id=\" +\r\n        this.state.subscriberID\r\n    )\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        if (data.success === true) {\r\n          this.setState({\r\n            subscribedArea: data.message,\r\n          });\r\n        } else {\r\n          alert(\"Error refreshing topics\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Error refreshing topics\");\r\n      });\r\n  };\r\n\r\n  handlePostRequest = (endpoint) => {\r\n    fetch(\r\n      this.props.apiURL + endpoint, // Bypass CORS\r\n      {\r\n        method: \"POST\",\r\n      }\r\n    )\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        let message = data.success ? \"Success: \" : \"Failure: \";\r\n        message += data.message;\r\n        alert(message);\r\n        this.refreshActiveTopics();\r\n      })\r\n      .catch((error) => {\r\n        alert(\"An error has occured.\");\r\n      });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n}\r\n\r\nexport default Subscriber;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport TopicList from \"./components/TopicList\";\nimport Publisher from \"./components/Publisher\";\nimport Subscriber from \"./components/Subscriber\";\n\nclass App extends Component {\n  state = {\n    apiURL: \"http://localhost:8888/\",\n    socketURL: \"ws://localhost:8080/\",\n    isTopicsLoaded: false,\n    topicList: [],\n    subscriberCount: 1,\n    publisherCount: 2,\n    subscriberList: [{ id: 0 }, { id: 1 }],\n    publisherList: [{ id: 0 }, { id: 1 }, { id: 2 }],\n  };\n\n  componentDidMount() {\n    this.handleRetrieveActiveTopics();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1 className=\"text-center\">Topic List</h1>\n        <div className=\"pt-2 container\">\n          <TopicList\n            topicList={this.state.topicList}\n            topicsLoaded={this.state.isTopicsLoaded}\n            onUpdate={this.handleRetrieveActiveTopics}\n          />\n        </div>\n\n        <br />\n\n        <div className=\"row\">\n          <div className=\"col-6\">\n            <button\n              className=\"btn btn-primary btn-block mb-2 container\"\n              onClick={this.handlePublisherAdd}\n            >\n              Add Publisher\n            </button>\n            {this.state.publisherList.map((publisher) => (\n              <React.Fragment>\n                <Publisher\n                  apiURL={this.state.apiURL}\n                  topicList={this.state.topicList}\n                  updateTopicList={this.handleRetrieveActiveTopics}\n                  key={publisher.id}\n                  id={publisher.id}\n                  onDelete={this.handlePublisherDelete}\n                />\n                <br />\n              </React.Fragment>\n            ))}\n          </div>\n          \n          <div className=\"col-6\">\n            <button\n              className=\"btn btn-primary btn-block mb-2 container\"\n              onClick={this.handleSubscriberAdd}\n            >\n              Add Subscriber\n            </button>\n            {this.state.subscriberList.map((subscriber) => (\n              <React.Fragment>\n                <Subscriber\n                  className=\"col-sm-6\"\n                  apiURL={this.state.apiURL}\n                  socketURL={this.state.socketURL}\n                  topicList={this.state.topicList}\n                  updateTopicList={this.handleRetrieveActiveTopics}\n                  key={subscriber.id}\n                  id={subscriber.id}\n                  onDelete={this.handleSubscriberDelete}\n                />\n                <br />\n              </React.Fragment>\n            ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  handleRetrieveActiveTopics = () => {\n    fetch(this.state.apiURL + \"getAllTopicNames\")\n      .then((resp) => resp.json())\n      .then((data) => {\n        if (data.success === true) {\n          this.setState({\n            isTopicsLoaded: true,\n            topicList: data.message,\n          });\n        } else {\n          this.setState({\n            isTopicsLoaded: false,\n          });\n        }\n      })\n      .catch((error) => {\n        this.setState({\n          isTopicsLoaded: false,\n        });\n      });\n  };\n\n  handleSubscriberAdd = () => {\n    this.state.subscriberList.push({ id: this.state.subscriberCount + 1 });\n    this.setState({ subscriberCount: this.state.subscriberCount + 1 });\n  };\n\n  handlePublisherAdd = () => {\n    this.state.publisherList.push({ id: this.state.publisherCount + 1 });\n    this.setState({ publisherCount: this.state.publisherCount + 1 });\n  };\n\n  handlePublisherDelete = (publisherID) => {\n    const remainingPublishers = this.state.publisherList.filter(\n      (c) => c.id !== publisherID\n    );\n    this.setState({ publisherList: remainingPublishers });\n  };\n\n  handleSubscriberDelete = (subscriberID) => {\n    const remainingSubscribers = this.state.subscriberList.filter(\n      (c) => c.id !== subscriberID\n    );\n    this.setState({ subscriberList: remainingSubscribers });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css' // imports bootstrap\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}